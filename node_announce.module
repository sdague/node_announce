<?php

/**
 * @file
 *
 * This module allows admins to set recurrent announcements for nodes to send
 * to specified email addresses.
 */

/**
 * Implentation of hook_menu()
 */
function node_announce_menu() {
  $items = array();
  $items['admin/config/system/node_announce'] = array(
    'title' => 'Node Announcements',
    'description' => 'Configure node announcements',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_announce_form_list'),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );

  $items['admin/config/system/node_announce/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/system/node_announce/add'] = array(
    'title' => 'Add Announcement',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_announce_form'),
    'access arguments' => array('administer node announcements'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node_announce.admin.inc',
  );


  $items['admin/config/system/node_announce/%/edit'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_announce_form', 4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );

  $items['admin/config/system/node_announce/%/log'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Log',
    'page callback' => 'node_announce_view_log',
    'page arguments' => array(4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );

  $items['admin/config/system/node_announce/%'] = array(
    'title' => 'Preview Announcement',
    'page callback' => 'node_announce_preview',
    'page arguments' => array(4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );

  $items['admin/config/system/node_announce/%/preview'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Preview',
    'page callback' => 'node_announce_preview',
    'page arguments' => array(4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
    'weight' => -1
  );

  $items['admin/config/system/node_announce/%/send'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Send',
    'page callback' => 'node_announce_send',
    'page arguments' => array(4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );


  return $items;
}

function node_announce_init() {
  drupal_add_css(drupal_get_path('module', 'node_announce') .'/css/node_announce.css');
  _node_announce_load_api();
}

/**
 * Implementation of hook_permission()
 */
function node_announce_permission() {
  return array('administer node announcements' => array(
      'title' => t('Administer Node Announcements'),
      'description' => t('Create / Edit / Remove Node Announcements.')
    )
  );
}

/**
 * Implementation of hook_nodeapi()
 */
function node_announce_nodeapi(&$node, $op, $a3, $a4) {
  switch($op) {
    case 'delete':
      node_announce_delete_records_by_nid($node->nid);
      break;
      // TODO: should we indicate that announcements will be sent out to admins?
  }
}


/**
 *  Implementation of hook_cron().
 *
 *  Go through all the announcements and set
 */
function node_announce_cron() {
  node_announce_process();
}

/**
 * Load API calls, which gives us access to DB and permissions checks
 */
function _node_announce_load_api() {
  require_once('./' . drupal_get_path('module', 'node_announce') . '/node_announce_api.inc');
}

function node_announce_theme() {
  $base = array(
    'path' => drupal_get_path('module', 'node_announce') . "/theme"
  );

  // TODO: get forms in here as well, though I was having an issue getting
  // them to take parameters as well as the form parameters
  $themes = array(
    'node_announce_list' => $base + array(
      'template' => 'node-announce-list',
      'variables' => array('announces' => array())
    ),
    'node_announce_preview' => $base + array(
      'template' => 'node-announce-preview',
      'variables' => array('announce' => NULL, 'node' => NULL)
    ),
    'node_announce_view_log' => $base + array(
      'template' => 'node-announce-view-log',
      'variables' => array('announce' => NULL, 'records' => array())
    ),
  );
  return $themes;
}



/***
 *
 */

function node_announce_process() {
  // drupal_set_message("Running node_announce cron job");

  $announces = node_announce_list();

  // drupal_set_message("Got the following announces: " . print_r($announces, TRUE));

  foreach ($announces as $ann) {
    $nodes = node_announce_applicable_nodes($ann);

    // drupal_set_message("Announce " . $ann->id . " got the following nodes: " . print_r($nodes, TRUE));

    foreach ($nodes as $node) {
      if (! node_announce_already_announced($ann, $node)) {
        node_announce_send_announce($ann, $node);
        node_announce_record_send($ann->id, $node->nid);
      }
    }
  }
}

/***
 * node_announce_send_announce : send email announcement out
 *
 * We prefer mimemail if that exists, but will also use the basic drupal mail
 * infrastructure as a fall back.
 */

function node_announce_send_announce($ann, $node) {
  error_log("(node_announce) key => " .  $ann->email_token);
  if (module_exists('mimemail')) {
    $result = mimemail(
      $ann->email_from,
      $ann->email_to,
      token_replace($ann->subject, 'node', $node),
      token_replace($ann->message, 'node', $node),
      NULL, /* plain text only */
      array(
        'From' => $ann->email_from,
        'Sender' => $ann->email_from),
      NULL, /* custom plain text */
      array(), /* attachments .... maybe put ical here later? */
      $ann->email_token
    );
  } else {
    $params = array('announce' => $ann, 'node' => $node);
    $result = drupal_mail('node_announce', $ann->email_token, $ann->email_to, language_default(), $params);
  }

}

/**
 * node_announce_mail : implementation of hook_mail()
 *
 * This is only called if mimemail isn't installed
 */

function node_announce_mail($key, &$message, $params) {
  $node = $params['node'];
  $ann = $params['announce'];

  $message['to'] = $ann->email_to;
  # yes, this is stupid, but it's the only way to get from set correctly
  $message['headers']['From'] = $ann->email_from;
  $message['headers']['Sender'] = $ann->email_from;
  $message['headers']['Return-Path'] = $ann->email_from;

  $message['subject'] = drupal_html_to_text(
    token_replace($ann->subject, array('node' => $node)));
  $message['body'][] = drupal_html_to_text(
    token_replace($ann->message, array('node' => $node)));
}


function node_announce_title_edit($id) {
  _node_announce_load_api();
  $ann = node_announce_load($id);
  return 'Edit Node Announce: ' . $ann->name;
}
