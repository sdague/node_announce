<?php
/**
 * Basic sanity testing for node_announce
 */
require_once "node_announce_test_case.inc";

class NodeAnnounceBasicTestCase extends NodeAnnounceTestCase {
  /**
   * User with rights to post SimpleTest Example content.
   */
  protected $privileged_user;
  private $format = "%Y-%m-%d H:i";

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Node Announce Basic Test',
      'description' => 'Ensure that node_announce has minimal functionality for release',
      'group' => 'Node Announce',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('content', 'date_api', 'date_repeat', 'date', 'node_announce');

    // Create and log in our privileged user.
    $privs = array(
      'access content',
      'create meeting content',
      'edit any meeting content',
      'administer node announcements'
    );

    $this->drupalCreateContentType(array(
        'type' => 'meeting',
        'name' => 'Meeting',
      ));

    $this->privileged_user = $this->drupalCreateUser($privs);
    $this->drupalLogin($this->privileged_user);

    $this->drupalGet('user');

    $this->createDateField();

    $this->drupalCreateNode(array("title" => "Page 1"));
    $this->drupalCreateNode(array("title" => "Page 2"));

    $this->drupalCreateNode(array("title" => "Story 1", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 2", "type" => "story"));

    $this->CreateMeeting(array("title" => "Meeting 1", "meeting_date" => date($this->format, time() + 24*60*60)));
    $this->CreateMeeting(array("title" => "Meeting 2", "meeting_date" => date($this->format, time() + 20*60*60)));
  }

  public function _checkAnnounceForm() {
    $this->drupalGet("admin/settings/node_announce/add");
    $this->assertFieldById("edit-name", "", "Name field exists");
    $this->assertFieldById("edit-days-before", "", "Day's before exists");
    $this->assertFieldById("edit-email-to", "", "Check for Email to");
    $this->assertFieldById("edit-email-from", "", "Check for Email from");
    $this->assertFieldById("edit-subject", "", "Subject exists");
    $this->assertFieldById("edit-message", "", "Message Exists");

  }

  public function _checkFormValidation() {
    $this->drupalGet("admin/settings/node_announce/add");
    $this->drupalPost(NULL, array(), t("Submit"));

    $this->assertText("Name can not be blank");
    $this->assertText("Days must be a positive integer");
    $this->assertText("Email from must be valid email address");
    $this->assertText("Email to must be valid email address");

    $values = array(
      "name" => $this->randomString(),
      "days_before" => "-5",
      "email_from" => "a@b.com",
      "email_to" => "a@c.com"
    );

    $this->drupalPost(NULL, $values, t("Submit"));

    $this->assertNoText("Name can not be blank");
    $this->assertText("Days must be a positive integer");
    $this->assertNoText("Email from must be valid email address");
    $this->assertNoText("Email to must be valid email address");
  }

  public function _checkAnnounceCreate($name, $days) {
    $this->drupalGet("admin/settings/node_announce/add");
    $this->CreateAnnounce(array(
        "name" => $name,
        "days_before" => $days,
        "email_from" => "a@b.com",
        "email_to" => "a@c.com",
        "date_field" => "meeting:field_meeting_date",
        "subject" => "[ANNOUNCE] MHVLUG Meeting [field_meeting_date-day], [field_meeting_date-month] [field_meeting_date-d] at 6pm",
        "message" => "MHVLUG is proud to announce our [field_meeting_date-month] meeting:

<h2>[title]</h2>"
      ));
    $this->drupalGet("admin/settings/node_announce");
    $this->assertText($name, "Ensure anounce was created");
  }

  public function testBasicCreation() {
    $this->_checkAnnounceForm();

    $this->_checkFormValidation();

    $this->_checkAnnounceCreate("Announce 1", 3);
    $this->_checkAnnounceCreate("Announce 2", 5);

  }


}