<?php
/**
 * Basic sanity testing for node_announce
 */
require_once "node_announce_test_case.inc";

class NodeAnnounceBasicTestCase extends NodeAnnounceTestCase {
  /**
   * User with rights to post SimpleTest Example content.
   */
  protected $privileged_user;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Node Announce Basic Test',
      'description' => 'Ensure that node_announce has minimal functionality for release',
      'group' => 'NodeAnnounce',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('content', 'date_api', 'date_repeat', 'date', 'node_announce', 'token');

    // Create and log in our privileged user.
    $privs = array(
      'access content',
      'create meeting content',
      'edit any meeting content',
      'administer node announcements'
    );

    $this->drupalCreateContentType(array(
        'type' => 'meeting',
        'name' => 'Meeting',
      ));

    $this->privileged_user = $this->drupalCreateUser($privs);
    $this->drupalLogin($this->privileged_user);

    $this->drupalGet('user');

    $this->createDateField();

    $this->drupalCreateNode(array("title" => "Page 1"));
    $this->drupalCreateNode(array("title" => "Page 2"));

    $this->drupalCreateNode(array("title" => "Story 1", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 2", "type" => "story"));

    $this->CreateMeeting(array(
        "title" => "Meeting 1",
        "meeting_date" => date($this->format, time() + 24*60*60),
        "meeting_date_to" => date($this->format, time() + 24*60*60 + 60*60)
      ));
    $this->CreateMeeting(array(
        "title" => "Meeting 2",
        "meeting_date" => date($this->format, time() + 20*60*60),
        "meeting_date_to" => date($this->format, time() + 20*60*60 + 60*60),
      ));

    $this->drupalGet("node/5");
    $this->assertResponse("200");

    $this->drupalGet("node/6");
    $this->assertResponse("200");
  }

  public function _checkAnnounceForm() {
    $this->drupalGet("admin/settings/node_announce/add");
    $this->assertFieldById("edit-name", "", "Name field exists");
    $this->assertFieldById("edit-days-before", "", "Day's before exists");
    $this->assertFieldById("edit-email-to", "", "Check for Email to");
    $this->assertFieldById("edit-email-from", "", "Check for Email from");
    $this->assertFieldById("edit-subject", "", "Subject exists");
    $this->assertFieldById("edit-message", "", "Message Exists");

  }

  public function _checkFormValidation() {
    $this->drupalGet("admin/settings/node_announce/add");
    $this->drupalPost(NULL, array(), t("Create"));

    $this->assertText("Name can not be blank");
    $this->assertText("Days must be a positive integer");
    $this->assertText("Email from must be valid email address");
    $this->assertText("Email to must be valid email address");

    $values = array(
      "name" => $this->randomString(),
      "days_before" => "-5",
      "email_from" => "a@b.com",
      "email_to" => "a@c.com"
    );

    $this->drupalPost(NULL, $values, t("Create"));

    $this->assertNoText("Name can not be blank");
    $this->assertText("Days must be a positive integer");
    $this->assertNoText("Email from must be valid email address");
    $this->assertNoText("Email to must be valid email address");
  }

  public function _checkAnnounceCreate($name, $days) {
    $this->drupalGet("admin/settings/node_announce/add");
    $this->CreateAnnounce(array(
        "name" => $name,
        "days_before" => $days,
        "email_from" => "a@b.com",
        "email_to" => "a@c.com",
        "date_field" => "meeting:field_meeting_date",
        "subject" => "[ANNOUNCE] MHVLUG Meeting [field_meeting_date-day], [field_meeting_date-month] [field_meeting_date-d] at 6pm",
        "message" => "MHVLUG is proud to announce our [field_meeting_date-month] meeting:

<h2>[title]</h2>"
      ));
    $this->drupalGet("admin/settings/node_announce");
    $this->assertText($name, "Ensure anounce was created");
  }

  public function _checkAnnouncePreview($index) {
    $wday = strftime("%A", time() + 20*60*60);
    $month = strftime("%B", time() + 20*60*60);
    $day = trim(strftime("%e", 20*60*60));

    $this->drupalGet("admin/settings/node_announce");
    $this->clickLink("Preview", $index);

    $this->assertText("From: a@b.com", "Ensure from was found");
    $this->assertText("To: a@c.com", "Ensure to was found");
    $this->assertText("Subject: [ANNOUNCE] MHVLUG Meeting $wday, $month $day at 6pm", "Ensure subject is right");
    $this->assertRaw("MHVLUG is proud to announce our $month meeting:\n\n<h2>Meeting 2</h2>", "Ensure first part of body is found");
  }

  public function _checkAnnounceEdit($index, $options) {
    $this->drupalGet("admin/settings/node_announce");
    $this->clickLink("Edit", $index);

    $this->drupalPost(NULL, $options, t("Save"));

    $this->clickLink("Edit", $index);
    foreach ($options as $key => $value) {
      $this->assertFieldByName($key, $value, "Ensuring $key => $value in updated form");
    }
  }

  public function _checkAnnounceList() {
    $this->drupalGet("admin/settings/node_announce");
    $this->assertText("Announce 1");
    $this->assertText("Announce 2");
    $this->assertText("Announce 3");
  }

  public function _checkAnnounceList2() {
    $this->drupalGet("admin/settings/node_announce");
    $this->assertNoText("Announce 1");
    $this->assertText("Announce 2");
    $this->assertText("Announce 3");
    $this->assertText("Announce 4");
  }

  public function _checkAnnounceList3() {
    $this->drupalGet("admin/settings/node_announce");
    $this->assertNoText("Announce 1");
    $this->assertNoText("Announce 2");
    $this->assertText("Announce 3");
    $this->assertText("Announce 4");
  }

  public function _checkDelete($index) {
    $this->drupalGet("admin/settings/node_announce");
    $this->clickLink("Edit", $index);
    $this->drupalPost(NULL, array(), t("Delete"));
    $this->assertText("Are you sure you want to delete this announcement?");
    $this->drupalPost(NULL, array(), t("Really Delete?"));
    $this->assertText("Deleted");
  }

  public function testBasicCreation() {
    $this->_checkAnnounceForm();

    $this->_checkFormValidation();

    $this->_checkAnnounceCreate("Announce 1", 3);
    $this->_checkAnnounceCreate("Announce 2", 5);
    $this->_checkAnnounceCreate("Announce 3", 8);

    $this->_checkAnnounceList();

    $this->_checkAnnouncePreview(0);

    $this->_checkAnnounceEdit(0, array("name" => "Announce 4", "email_from" => "foo@bar.com"));

    $this->_checkAnnounceList2();

    $this->_checkDelete(1);

    $this->_checkAnnounceList3();
  }


}